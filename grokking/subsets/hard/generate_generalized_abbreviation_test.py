from collections import deque

import pytest


def generate_generalized_abbreviation(word):
    """
    Given a word,
    write a function to generate all of its unique generalized abbreviations.

    A generalized abbreviation of a word can be generated by replacing
    each substring of the word with the count of characters in the substring
    """
    queue = deque([[]])

    for i in range(len(word)):
        for _ in range(len(queue)):
            curr = queue.popleft()
            queue.append([*curr, word[i]])
            if len(curr) > 0 and isinstance(curr[-1], int):
                curr[-1] += 1
                queue.append(curr)
            else:
                queue.append([*curr, 1])

    return list(map(lambda q: "".join(map(str, q)), queue))


@pytest.mark.parametrize(
    "word, expected",
    [
        ("BAT", ["BAT", "BA1", "B1T", "B2", "1AT", "1A1", "2T", "3"]),
        (
            "code",
            [
                "code",
                "cod1",
                "co1e",
                "co2",
                "c1de",
                "c1d1",
                "c2e",
                "c3",
                "1ode",
                "1od1",
                "1o1e",
                "1o2",
                "2de",
                "2d1",
                "3e",
                "4",
            ],
        ),
    ],
)
def test_generate_generalized_abbreviation(word, expected):
    assert generate_generalized_abbreviation(word) == expected
